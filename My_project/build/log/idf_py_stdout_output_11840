[1/12] Building C object esp-idf/lib_uart/CMakeFiles/__idf_lib_uart.dir/app_uart.c.obj
[2/12] Linking C static library esp-idf\lib_uart\liblib_uart.a
[3/12] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D E:\Espressif\ESP\My_project\build\bootloader\esp-idf\esptool_py && E:\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe E:/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 E:/Espressif/ESP/My_project/build/bootloader/bootloader.bin"
Bootloader binary size 0x6860 bytes. 0x7a0 bytes (7%) free.
[4/10] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/app_main.c.obj
E:/Espressif/ESP/My_project/main/app_main.c:10:20: warning: 'TAG' defined but not used [-Wunused-variable]
   10 | static const char *TAG = "main";
      |                    ^~~
[5/10] Linking C static library esp-idf\main\libmain.a
[6/10] Generating ld/sections.ld
[7/10] Linking CXX executable My_project.elf
[8/10] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated E:/Espressif/ESP/My_project/build/My_project.bin
[9/10] cmd.exe /C "cd /D E:\Espressif\ESP\My_project\build\esp-idf\esptool_py && E:\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe E:/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app E:/Espressif/ESP/My_project/build/partition_table/partition-table.bin E:/Espressif/ESP/My_project/build/My_project.bin"
My_project.bin binary size 0x31ec0 bytes. Smallest app partition is 0x100000 bytes. 0xce140 bytes (80%) free.
[9/10] cmd.exe /C "cd /D E:\Espressif\frameworks\esp-idf-v5.2.2\components\esptool_py && E:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=E:/Espressif/frameworks/esp-idf-v5.2.2 -D SERIAL_TOOL=E:/Espressif/python_env/idf5.2_py3.11_env/Scripts/python.exe;;E:/Espesptool.py --chip esp32 -p COM3 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 2MB 0x1000 bootloader/bootloader.bin 0x10000 My_project.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM3
Connecting....
Chip is ESP32-D0WD-V3 (revision v3.1)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: 48:e7:29:af:74:dc
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x00041fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26720 bytes to 16349...
Writing at 0x00001000... (100 %)
Wrote 26720 bytes (16349 compressed) at 0x00001000 in 0.6 seconds (effective 380.3 kbit/s)...
Hash of data verified.
Compressed 204480 bytes to 109226...
Writing at 0x00010000... (14 %)
Writing at 0x0001d09b... (28 %)
Writing at 0x00022d74... (42 %)
Writing at 0x00028cce... (57 %)
Writing at 0x0002f3a2... (71 %)
Writing at 0x00037872... (85 %)
Writing at 0x0003d9b2... (100 %)
Wrote 204480 bytes (109226 compressed) at 0x00010000 in 2.8 seconds (effective 588.2 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 1560.7 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
ressif/frameworks/esp-idf-v5.2.2/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=E:/Espressif/ESP/My_project/build -P E:/Espressif/frameworks/esp-idf-v5.2.2/components/esptool_py/run_serial_tool.cmake"
